@page "/"
@using Common.Models
@using DataAccess.Data
@using FrontEnd.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ProtectedLocalStorage ProtectedLocalStore
@inject AppState AppState
@inject CustomerService CustomerService


<PageTitle>Home</PageTitle>
<AuthorizeView>
    <Authorized>
        <RadzenText TextStyle="TextStyle.H3">Välkommen tillbaka!</RadzenText>
        <RadzenText>
            Vi erbjuder färskbakade produkter i en hypermodern e-handel. Om du precis skapat ett konto, fyll i dina uppgifter under "Hantera konto i menyn."
        </RadzenText>
    </Authorized>
    <NotAuthorized>
        <RadzenText TextStyle="TextStyle.H2">Välkommen till B.R.Ö.D!</RadzenText>
        <RadzenText>
            Logga in eller registrera dig för att komma åt sidan.
        </RadzenText>
    </NotAuthorized>
</AuthorizeView>
<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
    <RadzenTextBox Placeholder="Sök produktnamn / id..." ValueChanged="FindProduct"></RadzenTextBox>
</RadzenRow>
<div class="row justify-content-md-center">
    <Virtualize Context="product" Items="FilteredProducts">
        <div class="col-md-4">
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 320px">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                    @if (product.CategoryId == 1)
                    {
                        <RadzenImage Path="\Resources\bread.svg" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                    }
                    else
                    {
                        <RadzenImage Path="\Resources\sweet.svg" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                    }
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Namn</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(product?.Name)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Typ</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@Categories.FirstOrDefault(i => i.Id == product.CategoryId).Name</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard class="rz-background-color-primary-darker rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Övrigt</strong></RadzenText>
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="12">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Id</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(product.Id)</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Pris</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(product.Price) kr</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Beskrivning</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(product.Description)</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn SizeSM="12">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">I Lager?</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(product.Status ? "Ja" : "Nej")</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
                <AuthorizeView>
                    <Authorized>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
                            @if (product.Status == false)
                            {
                                <RadzenButton Disabled="true" Variant="Variant.Filled" Text="Lägg i kundkorg"/>
                            }
                            else
                            {
                                <RadzenButton Click="(() => SaveStateAsync(product, 1))" Variant="Variant.Filled" Text="Lägg i kundkorg"/>
                            }
                        </RadzenStack>
                    </Authorized>
                </AuthorizeView>
            </RadzenCard>
        </div>
    </Virtualize>
</div>



@code {
    private List<Product> Products { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    private List<Product> FilteredProducts { get; set; } = new();
    private List<OrderDetails> Cart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories.AddRange(await CategoryService.GetAllCategories());
        Products.AddRange(await ProductService.GetAllProducts());
        FilteredProducts.AddRange(Products);
        if(Categories.Count == 0 || Products.Count == 0)
        {
            await CategoryService.CreateCategory(new Category { Name = "Sötsaker"});
            await CategoryService.CreateCategory(new Category { Name = "Bröd" });

            await ProductService.AddProduct(new Product { Name = "Kanelbulle", Status = true, Description = "En god bulle", Price = 20, CategoryId = 1 });
            await ProductService.AddProduct(new Product { Name = "Surdegslimpa", Status = true, Description = "En god limpa", Price = 50, CategoryId = 2 });

            await CustomerService.AddCustomer(new Customer
            { FirstName = "Kalle", LastName = "Bengtsson", Email = "kalle@yahoo.com", StreetAddress = "Gatan 3", Phone = "0767563563", PostalCode = 55630, City = "Narnia"});
            Categories.AddRange(await CategoryService.GetAllCategories());
            Products.AddRange(await ProductService.GetAllProducts());

        }
    }
    private void FindProduct(string value)
    {
        if (int.TryParse(value, out _))
        {
            FilteredProducts.Clear();
            FilteredProducts = Products.Where(n => n.Id.ToString().Contains(value)).ToList();
        }
        else
        {
            FilteredProducts.Clear();
            FilteredProducts = Products.Where(n => n.Name.ToLower().Contains(value.ToLower())).ToList();

        }
    }

    public async Task SaveStateAsync(Product product, int quantity)
    {
        var loggedInUserId = await ProtectedLocalStore.GetAsync<ApplicationUser>("user");
        var cart = await ProtectedLocalStore.GetAsync<List<OrderDetails>>("cart");
        Cart = cart.Success ? cart.Value : Cart = new List<OrderDetails>();

        if (loggedInUserId.Success) // If user is logged in
        {
            if(Cart.Any(x => x.ProductId == product.Id))
            {
                var existingProduct = Cart.FirstOrDefault(x => x.ProductId == product.Id);
                existingProduct.Quantity += quantity;
            }
            else
            {
                Cart.Add(new OrderDetails { ProductId = product.Id, Quantity = quantity });
            }
            await ProtectedLocalStore.SetAsync("cart", Cart);
            AppState.Amount = Cart.Sum(x => x.Quantity);
        }
    }

}