@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Common.Models
@using FrontEnd.Services
@using Microsoft.AspNetCore.Identity
@using FrontEnd_Auth.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject CustomerService CustomerService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="Förnamn." />
                <label for="firstname" class="form-label">Förnamn</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Efternamn." />
                <label for="username" class="form-label">Efternamn</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Skriv in ditt telefonnummer." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.StreetAddress" class="form-control" placeholder="Gatuadress." />
                <label for="username" class="form-label">Gata</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PostalCode" class="form-control" placeholder="Postnummer." />
                <label for="username" class="form-label">Postnummer</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.City" class="form-control" placeholder="Ort." />
                <label for="username" class="form-label">Ort</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? firstName;
    private string? lastName;
    private string? streetAddress;
    private string postalCode;
    private string? city; 

    private CustomerModel CurrentUser { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        CurrentUser = await CustomerService.GetCustomerByEmail(username);
        phoneNumber = CurrentUser.Phone;
        firstName = CurrentUser.FirstName;
        lastName = CurrentUser.LastName;
        streetAddress = CurrentUser.StreetAddress;
        postalCode = CurrentUser.PostalCode.ToString();
        city = CurrentUser.City;

        Input.PhoneNumber ??= phoneNumber;
        Input.FirstName ??= firstName;
        Input.LastName ??= lastName;
        Input.StreetAddress ??= streetAddress;
        Input.PostalCode ??= postalCode;
        Input.City ??= city;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }
        CurrentUser.Phone = Input.PhoneNumber;
        CurrentUser.FirstName = Input.FirstName;
        CurrentUser.LastName = Input.LastName;
        CurrentUser.StreetAddress = Input.StreetAddress;
        CurrentUser.PostalCode = Convert.ToInt32(Input.PostalCode);
        CurrentUser.City = Input.City;
        await CustomerService.UpdateCustomer(CurrentUser);

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
        [Required]
        public string FirstName { get; set; } = default!;
        [Required]
        public string LastName { get; set; } = default!;
        [Required]
        public string StreetAddress { get; set; } = default!;
        [Required]
        public string PostalCode { get; set; } = default!;
        [Required]
        public string City { get; set; } = default!;
    }
}
