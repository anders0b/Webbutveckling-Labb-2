@page "/orders"
@using Common.Models
@using FrontEnd.Services
@inject OrderService OrderService
@inject OrderDetailsService OrderDetailService
@inject ProductService ProductService
@inject DialogService DialogService
@inject CustomerService CustomerService

<h3>Orders</h3>
<RadzenText>
    Hantera ordrar och beställda produkter.
</RadzenText>
<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" class="mb-3">
    <RadzenButton Click=@CreateOrder Variant="Variant.Flat" Text="Skapa"  />
    <RadzenButton ButtonStyle="ButtonStyle.Danger" Click=@DeleteOrder Variant="Variant.Flat" Text="Ta bort markerad" />
</RadzenStack>
<RadzenDataGrid @ref="grid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" ExpandMode="@expandMode"
                Data="@orders" TItem="OrderModel" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedOrders>
    <Template Context="order">
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Orderdetaljer">
                    <RadzenDataGrid @ref="orderDetailsGrid" AllowFiltering="false" AllowPaging="true" AllowSorting="false" Data="@order.OrderDetails" TItem="OrderDetailsModel">
                        <Columns>
                            <RadzenDataGridColumn TItem="OrderDetailsModel" Property="OrderId" Title="Order"/>
                            <RadzenDataGridColumn TItem="OrderDetailsModel" Property="Name" Title="Produkt">
                                <Template Context="orderItem">
                                    @Products.FirstOrDefault(x => x.Id == orderItem.ProductId)?.Name
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="OrderDetailsModel" Property="Quantity" Title="Antal">
                                <Template Context="orderItem">
                                    <RadzenNumeric TValue="int" Value="orderItem.Quantity" Change="args => UpdateQuantity(args, orderItem)" Min="1" Style="width:100%" />
                                </Template>
                                <FooterTemplate>
                                    Totalt antal: @order.OrderDetails.Sum(x => x.Quantity)
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="OrderDetailsModel" Title="Pris">
                                <Template Context="orderItem">
                                    @(Products.FirstOrDefault(x => x.Id == orderItem.ProductId)?.Price * orderItem.Quantity) kr
                                </Template>
                                <FooterTemplate>
                                    Totalt: @order.OrderDetails.Sum(x => x.Quantity * Products.FirstOrDefault(p => p.Id == x.ProductId)?.Price) kr
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="OrderModel" Property="Id" Title="Order ID" Width="120px" />
        <RadzenDataGridColumn TItem="OrderModel" Property="CustomerId" Title="Kund" Width="120px">
            <Template Context="order">
                @Customers.FirstOrDefault(x => x.Id == order.CustomerId)?.FirstName @Customers.FirstOrDefault(x => x.Id == order.CustomerId)?.LastName
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrderModel" Property="OrderDate" Title="Orderdatum" Width="200px">
            <Template Context="order">
                <RadzenDatePicker ValueChanged="args => UpdateOrderDate((DateTime)args, order)" TValue="DateTime?" Value="order.OrderDate" Style="width:100%"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrderModel" Property="IsShipped" Title="Skickad?" Width="200px">
            <Template Context="order">
                <RadzenRadioButtonList @bind-Value=@order.IsShipped Change="args => UpdateShipping(args, order)" TValue="bool">
                    <Items>
                        <RadzenRadioButtonListItem Text="Ja" Value="true" />
                        <RadzenRadioButtonListItem Text="Nej" Value="false" />
                    </Items>
                </RadzenRadioButtonList>            
                </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    DataGridExpandMode expandMode = DataGridExpandMode.Multiple;
    bool? allRowsExpanded;

    async Task ToggleRowsExpand(bool? value)
    {
        allRowsExpanded = value;

        if (value == true)
        {
            await grid.ExpandRows(grid.PagedView);
        }
        else if (value == false)
        {
            await grid.CollapseRows(grid.PagedView);
        }
    }

    private List<OrderModel> orders { get; set; } = new();
    private List<ProductModel> Products { get; set; } = new();
    private List<CustomerModel> Customers { get; set; } = new();
    RadzenDataGrid<OrderModel> grid;
    IList<OrderModel> selectedOrders;
    IList<OrderDetailsModel> selectedOrderDetail;
    RadzenDataGrid<OrderDetailsModel> orderDetailsGrid;

    private async Task UpdateQuantity(int quantity, OrderDetailsModel orderItem)
    {
        await OrderDetailService.UpdateProductQuantity(orderItem.OrderId, orderItem.ProductId, quantity);
        orders.Clear();
        orders.AddRange(await OrderService.GetAllOrdersAndOrderDetails());
        await grid.Reload();
        await ToggleRowsExpand(true);
    }
    private async Task UpdateOrderDate(DateTime date, OrderModel order)
    {
        DateOnly dateOnly = DateOnly.FromDateTime(date);
        order.OrderDate = dateOnly;
        await OrderService.UpdateOrder(order);
        await grid.Reload();
    }

    protected override async Task OnInitializedAsync()
    {
        orders.AddRange(await OrderService.GetAllOrdersAndOrderDetails());
        Products.AddRange(await ProductService.GetAllProducts());
        Customers.AddRange(await CustomerService.GetAllCustomers());
        await grid.Reload();
    }

    public async Task CreateOrder()
    {
        await DialogService.OpenAsync<CreateOrder>("Create Order");
        new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true };
    }
    public async Task DeleteOrder()
    {
        if (selectedOrders == null)
        {
            return;
        }
        await OrderService.DeleteOrder(selectedOrders.FirstOrDefault().Id);
        orders.Clear();
        orders.AddRange(await OrderService.GetAllOrdersAndOrderDetails());
        await grid.Reload();

    }
    public async Task UpdateShipping(bool status, OrderModel order)
    {
        await OrderService.UpdateOrderIsShipped(order.Id, status);
        await grid.Reload();
    }


}