@page "/checkout"
@using Common.Models
@using FrontEnd.Services
@using FrontEnd_Auth.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject OrderService OrderService
@inject ProductService ProductService
@inject ProtectedLocalStorage ProtectedLocalStore
@inject CustomerService CustomerService
@inject AppState AppState
@inject NotificationService NotificationService
<RadzenAlert @bind-Visible="visible" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
    Tack för din order!
</RadzenAlert>
<RadzenTemplateForm Data="@CurrentCustomer">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Kontaktinformation">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Mail" Component="email" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Disabled="true" @bind-Value="@CurrentCustomer.Email" Style="width: 100%;" Name="email" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Namn" Component="Name"/>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox @bind-Value="@CurrentCustomer.FirstName" Style="width: 100%;" Name="Name"/>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Telefon" Component="Phone"/>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox @bind-Value="@CurrentCustomer.Phone" Style="width: 100%;" Name="Phone"/>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenFieldset Text="Leveransadress">
                            <RadzenStack>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Gatuadress" Component="Address1"/>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox @bind-Value="@CurrentCustomer.StreetAddress" Style="width: 100%;" Name="Address1"/>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Postnummer" Component="Zip"/>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric @bind-Value="@CurrentCustomer.PostalCode" Style="width: 100%;" Name="Zip"/>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Stad" Component="City"/>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox @bind-Value="@CurrentCustomer.City" Style="width: 100%;" Name="City"/>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenDataGrid @ref="cartGrid" EditMode="@editMode" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true" AllowSorting="false" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@Cart" TItem="OrderDetailsModel" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrderDetailsModel" Property="Name" Title="Namn" Frozen="true">
                            <Template Context="detail">
                                @Products.FirstOrDefault(p => p.Id == detail.ProductId)?.Name
                            </Template>
                            <FooterTemplate>
                                <RadzenText TextStyle="TextStyle.Body2">Summering</RadzenText>
                            </FooterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrderDetailsModel" Property="Price" Title="Pris">
                            <Template Context="detail">
                                @String.Format(new System.Globalization.CultureInfo("sv-SE"), "{0:C}", (Products.FirstOrDefault(p => p.Id == detail.ProductId).Price * detail.Quantity))
                            </Template>
                            <FooterTemplate>
                                Total @String.Format(new System.Globalization.CultureInfo("sv-SE"), "{0:C}", Cart.Sum(x => x.Quantity * Products.FirstOrDefault(p => p.Id == x.ProductId).Price))
                            </FooterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn  Property="Quantity" TItem="OrderDetailsModel" Title="Antal" Frozen="true">
                            <Template Context="orderItem">
                                <RadzenNumeric TValue="int" Value="orderItem.Quantity" Change="args => UpdateQuantity(args, orderItem)" Min="1" Style="width:100%" />
                            </Template>
                            <FooterTemplate>
                                Antal: @Cart.Sum(x => x.Quantity)
                            </FooterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="Ta bort" TItem="OrderDetailsModel">
                            <Template Context="orderItem">
                                <RadzenButton Click="(() => DeleteCartItem(orderItem))" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="orderItem">
                                <RadzenButton Click="(() => DeleteCartItem(orderItem))" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
    @if (Cart.Count == 0)
    {
            <RadzenButton Disabled="true" Click="Purchase" ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="payment" Text="Köp" />
    }
    else
    {
        <RadzenButton Click="Purchase" ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="payment" Text="Köp" />
    }
        </RadzenStack>
    </RadzenTemplateForm>

@code {
    private RadzenDataGrid<OrderDetailsModel> cartGrid;
    private CustomerModel CurrentCustomer { get; set; } = new();
    private List<ProductModel> Products { get; set; } = new();
    private List<OrderModel> Orders { get; set; } = new();
    private List<OrderDetailsModel> Cart { get; set; } = new();
    DataGridEditMode editMode = DataGridEditMode.Multiple;
    private DateOnly value = DateOnly.FromDateTime(DateTime.Now);
    private bool visible = false;


    protected override async Task OnInitializedAsync()
    {
        Products.AddRange(await ProductService.GetAllProducts());
        Orders.AddRange(await OrderService.GetAllOrders());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();
        }

    }
    private async Task LoadStateAsync()
    {
        var loggedInUserId = await ProtectedLocalStore.GetAsync<ApplicationUser>("user");
        var cart = await ProtectedLocalStore.GetAsync<List<OrderDetailsModel>>("cart");
        CurrentCustomer = await CustomerService.GetCustomerByEmail(loggedInUserId.Value.Email);
        Cart = cart.Success ? cart.Value : Cart = new List<OrderDetailsModel>();
        StateHasChanged();
    }
    private async Task DeleteCartItem(OrderDetailsModel orderItem)
    {
        if(Cart.Any(x => x.ProductId == orderItem.ProductId))
        {
            var existingProduct = Cart.FirstOrDefault(x => x.ProductId == orderItem.ProductId);
            Cart.Remove(existingProduct);
        }
        await ProtectedLocalStore.SetAsync("cart", Cart);
        AppState.Amount = Cart.Sum(x => x.Quantity);
        await cartGrid.Reload();
    }
    private async Task UpdateQuantity(int quantity, OrderDetailsModel orderItem)
    {
        if(Cart.Any(x => x.ProductId == orderItem.ProductId))
        {
            var existingProduct = Cart.FirstOrDefault(x => x.ProductId == orderItem.ProductId);
            existingProduct.Quantity = quantity;
        }
        await ProtectedLocalStore.SetAsync("cart", Cart);
        AppState.Amount = Cart.Sum(x => x.Quantity);
        await cartGrid.Reload();
    }

    private async Task Purchase()
    {
        var newOrder = new OrderModel
        {
            CustomerId = CurrentCustomer.Id,
            OrderDate = value,
            IsShipped = false,
            OrderDetails = Cart
        };
        await OrderService.AddOrder(newOrder);
        Cart.Clear();
        await cartGrid.Reload();
        AppState.Amount = Cart.Sum(x => x.Quantity);
        await ProtectedLocalStore.SetAsync("cart", Cart);
        visible = true;
    }

}
