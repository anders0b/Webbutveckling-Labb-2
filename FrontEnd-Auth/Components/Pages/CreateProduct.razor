@page "/products/create-product"
@using Common.Models
@using FrontEnd.Services
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject Radzen.DialogService dialogService
@inject NotificationService notificationService
<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenTemplateForm TItem="ProductModel" Data=@product Submit=@onSubmit InvalidSubmit=@onInvalidSubmit>
        <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
            <RadzenColumn>
                <RadzenText>Redigera produkt</RadzenText>
                <RadzenDropDown @bind-Value="productId" TValue="int" TextProperty="Name" ValueProperty="Id" Data=@products Change=@EditProduct/>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton Click=@ClearCurrent Variant="Variant.Flat" Text="Clear" Style="width: 120px"/>
            </RadzenColumn>
            <RadzenFormField Text="Id" Style="width: 100%;">
                <RadzenNumeric Disabled="true" @bind-Value="@product.Id" Style="width: 100%;"/>
            </RadzenFormField>
            <RadzenFormField Text="Namn" Style="width: 100%;">
                <RadzenTextBox @bind-Value="@product.Name" Style="width: 100%;"/>
            </RadzenFormField>
            <RadzenLabel Text="Kategori" Component="DropDownTextValueProperties"/>
            <RadzenDropDown @bind-Value=@product.CategoryId TextProperty="Name" ValueProperty="Id" Data=@categories Style="width: 100%; max-width: 400px;" Name="DropDownTextValueProperties"/>
            <RadzenFormField Text="Beskrivning" Style="width: 100%;">
                <RadzenTextBox Name="Email" @bind-Value="@product.Description" Style="width: 100%;"/>
            </RadzenFormField>
            <RadzenFormField Text="Pris" Style="width: 100%;">
                <RadzenNumeric @bind-Value="@product.Price" Style="width: 100%;"/>
            </RadzenFormField>
            <RadzenLabel Text="I lager?" Style="width: 100%;"/>
            <RadzenRadioButtonList @bind-Value=@product.Status TValue="bool" class="mb-5">
                <Items>
                    <RadzenRadioButtonListItem Text="Ja" Value="true"/>
                    <RadzenRadioButtonListItem Text="Nej" Value="false"/>
                </Items>
            </RadzenRadioButtonList>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Flat" Text="Submit" Style="width: 120px"/>
            <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Outlined" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenStack>

@code {
    IEnumerable<ProductModel> products;
    private ProductModel product { get; set; } = new();
    private IEnumerable<CategoryModel> categories { get; set; }
    int productId;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        categories = await CategoryService.GetAllCategories();
        products = await ProductService.GetAllProducts();
    }

    public async Task onSubmit()
    {
        if (product.Id != 0)
        {
            await ProductService.UpdateProduct(product);
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Uppdaterad", Detail = "Du har uppdaterat en produkt", Duration = 4000 });
        }
        else
        {
            await ProductService.AddProduct(product);
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Skapad", Detail = "Du har skapat en produkt", Duration = 4000 });
        }
        product = new ProductModel();
    }
    public void onInvalidSubmit()
    {
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Fel", Detail = "Var vänlig se över input", Duration = 4000 });
    }
    public void EditProduct()
    {
        product = products.FirstOrDefault(p => p.Id == productId);
    }
    public void ClearCurrent()
    {
        product = new ProductModel();
        productId = 0;
    }
}
